version: 2.1
references:
  ## Workspaces
  workspace: &workspace
               ~/src

  ## Docker image configurations
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-29
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: -Xmx1536m -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.caching=true -Dorg.gradle.configureondemand=true -Dkotlin.compiler.execution.strategy=in-process -Dkotlin.incremental=false

  ## Cache
  gradle_key: &gradle_key
                jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}

  gems_key: &gems_key
              gems-{{ checksum "Gemfile.lock" }}

  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_key

  restore_gems_cache: &restore_gems_cache
    restore_cache:
      key: *gems_key

  save_gradle_cache: &save_gradle_cache
    save_cache:
      key: *gradle_key
      paths:
        - ~/.gradle
        - ~/.m2

  save_gems_cache: &save_gems_cache
    save_cache:
      key: *gems_key
      paths:
        - vendor/bundle

  decode_production_android_key: &decode_production_android_key
    run:
      name: Decode Android key store
      command: echo $KEYSTORE | base64 -di | tee keystore.jks app/keystore.jks >/dev/null

  make_firebase_authentication_json: &make_firebase_authentication_json
    run:
      name: Write Firebase Service Account Json Before Distribution
      command: echo $FIREBASE_DISTRIBUTION_SERVICE_JSON >> firebase-distribution-service-account.json

  ## Install Firebase CLI
  install_firebase_cli: &install_firebase_cli
    run:
      name: Install Firebase CLI
      command: curl -sL firebase.tools | bash


  ## Dependencies
  install_ruby_bundler: &install_ruby_bundler
    run:
      name: Install Bundler 2
      command: gem install bundler -v 2.0.2

  ## Dependencies
  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby Dependencies
      command: bundle check || bundle install --path vendor/bundle

  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

jobs:
  ## Run unit tests
  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *install_ruby_bundler
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - run:
          name: Run unit tests
          command: bundle exec fastlane unit_tests
      - run:
          name: clear gradle cache
          command: rm -fr ~/.gradle/daemon/
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/

  ## Run instrumentation tests
  test_instrumentation:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *install_ruby_bundler
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      # Since we will download a video, we require integrity checking with CRC32c
      # But the crcmod installation in the docker image isn't using the module's C extension
      # So, uninstall it and install again with the C extension
      - run:
          name: Uninstall crcmod
          command: echo "y" | sudo pip uninstall crcmod
      - run:
          name: Install crcmod
          command: sudo pip install -U crcmod
      - run:
          name: Run instrumentation tests in Firebase testlab
          command: bundle exec fastlane instrumentation_tests_testlab
      - store_artifacts:
          path: firebase/
          destination: /firebase/

  ## Deploy to Crashlytics Beta
  deploy_firebase_distribution_closed_beta:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *install_ruby_bundler
      - *ruby_dependencies
      - *install_firebase_cli
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *make_firebase_authentication_json
      - run:
          name: Deploy to Firebase Distribution
          command: bundle exec fastlane deploy_to_firebase_distribution release:true group:vinners_internal_team

  ## Deploy to Crashlytics Beta
  deploy_firebase_distribution_open_beta:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *install_ruby_bundler
      - *ruby_dependencies
      - *install_firebase_cli
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *make_firebase_authentication_json
      - run:
          name: Deploy to Firebase Distribution
          command: bundle exec fastlane deploy_to_firebase_distribution release:true group:public_tester_group

  ## Deploy to Play Store
  deploy_play_store:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *install_ruby_bundler
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - run:
          name: Deploy to Play Store
          command: bundle exec fastlane deploy_to_play_store

workflows:
  version: 2
  workflow:
    jobs:
      - test_unit
      - deploy_firebase_distribution_closed_beta:
          filters:
            branches:
              only:
                - beta-closed
          requires:
            - test_unit
      - deploy_firebase_distribution_open_beta:
          filters:
            branches:
              only:
                - beta-open
          requires:
            - test_unit
      - deploy_play_store:
          filters:
            branches:
              only:
                - production
          requires:
            - test_unit


